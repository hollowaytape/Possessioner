Intro text is around POSM.EXE:b880.
You can replace with ascii text but it gets stretched out to twice its width onscreen.
	When reading a character, it branches and does stuff with cs:[08a2] and cs:[08a3].
		If x < 80, mov 1 into 08a2
		If 08a2 == 01, check if al is 0a
		If al == 20, mov 1 into 08a3
		else mov 2 into 08a3

		Are spaces still 01 width? Looks like it...
		2ec606a30802 mov cs:[08a3], 02
			-> Change it to mov 01
			This edits the cursor movement, but the characters are still doublewide. Y'know what i mean

		W is 57, gets flipped to 5700 and put in dx
		Eventually moved back to al, where it gets sub al, 20
			Then mult by 20 (6e0)


		xor ax, ax
		mov al, dh
		sub al, 20
		mov cx, 20
		mul cx
		mov si, 109c
		add si, ax
		mov cx, 10
		repe movsw
		ret

		xor ah, ah
		mov cx, 10
		mov al, ah
		or 1l, 20
		out a5, al
		in al, a9
		stosb
		mov al, ah
		out a5, al
		in al, a9
		stosb
		inc ah
		loop 0a5a (mov al, ah)

		Change 1156:09e5 e85700 -> e86d00 (call 0a55 instead of 0a3f)
			Nothing is in AX, need to load stuff from DX first?
		Change 8ac4 (mov al, ah) to 8ac6 (mov al, dh)

		Alright, so the intro text is using a custom font called QUEENS.FNT.
			If it's ASCII text, it gets converted into an offset in QUEENS.FNT and that gets written to VRAM.
			So I have 2 options here:
				1. Try to edit the font itself
					* Won't open in TileMolestor. Fuck that then
				2. Do a fullwidth/halfwidth hack like usual
					* POSM.EXE:28d2: 1fa1  -> c025 (redirect FW to HW)
					* 1156:094a 2ec606a202801 -> 2ec606a20802
					* nop out 1156:09a9 inc si
					* change mov ah, al to mov ah, 82 (b482)
					* Nop out mov al, [si]

					TEXT TEXT text text = 59 &5UY FU   ??
					What if I get rid of the inc si at 1156:0a29: (context: 46e2fceb0890a840)
						* No
					How about 1905:017b, 46eb0cb82800?
						* No
					How about the double one, 46463b76fe7cbfff46fe?
						* Yep


					* Punctuation problems.
						* At 1156:1ad7 (cmp dh, 28), normal text is:
							* 294d, 2961, 296e, etc
						* Punctuation is:
							* 2a20
							* 822e -> 042e -> 040f -> 04ee -> 2aae

			* Needs an additional fix to prevent every-other-character reading in the tall dialogue.
				* 1156:093d?

	Dialogue and exposition text in the intro seem to behave differently. Dialogue is double wide and double tall, exposition is just double wide


First save file's "look inside" text is at POS1.DSD:90.
Ascii text shows up perfectly here.

Except for the nametags, they need a text hack. (Nametags are read from the table at POS.EXE:a100)
	Table is in memory at seg 26a2
	Reads 2 bytes at a time (al, then mov ah, [si], inc si)

	Try cancelling out the mov ah, [si], inc si. (8a2446, at 2440:25be)


	Replace:
	7502 jnz 25be
	eb13 jmp 25d1

	with:
	7415 jz 25d1


	After the lodsb:

	7415 jz 25d1
	88c4 mov ah, al
	b082 mov al, 82
	90 nop

	string is:
	741588c4b08290

	It just really doesn't want to read from column 08...

	Nametag rendering:     2440:25b7
	Normal text rendering: 2440:23ef
		if it's lower than 80:
			mov ah, ff
			mov cs:[2e34], ah
			call 28cd
		Does some stuff, removes ah, then stosw.
			So, "H" gets written as 48 00. (Oh! Column 00, not 08)
		The stuff getting read to VRAM gets spaced out differently. Nametag things have extra 00-00s between the letters.
			Remove the two inc di's to stop this and get the text to be normal.

		Now the 8140's are rendered as _@ all the way out to the text.
			Just replace them with ascii spaces and it renders fine.

	Final hack:
	begins with ac3c0d

	7415 jz 25d1
	30e4 xor ah, ah
	90
	90
	90
	90
	90
	90
	90
	90

	then, after abe82b03, 90 90 again

	first string is: 741530e49090909090909090



Dump is quite large, it's about 15,173 lines after some garbage removal...

Images:
	* Intro text images.
		* PTOKYO1.CGX - "Year 2035 Tokyo"
		* PTOKYO2.CGX - some more text
	* Various other images
		* A_AR6.SEL - top secret thing that belongs to Nedra?
		* LISTP.SEL - names of possessioners. (If the spellings change, change this too)
		* LM1.SEL-LM7.SEL - description text of possessioners. Definitely gotta translate this

	* I think all of the grey panels in battle are images. So, attack names/categories, nametags, etc
	* FIGHT.CGX is the fight layout. (All the parts that don't need translating)
	* MENU.CGX is the title screen
	* LIST.CGX is a "possessioner list", maybe a cg gallery?
	* MESF1+F2 are the corner portraits

	* Doesn't look like any are small enough to be the panels.

	* Changing the a:font.sel to laml.sel covers most of the nametags with garbage...
		* font2.sel is the rest. (the other character on that one name)
			* How do entire kana fonts fit into these tiny images??
				* They're just the letters necessary, also numbers.
	* Still unknown: the action images.
		* fp.sel is the "action panel"
		* p5.sel is a bunch of action items
		* So is p4.sel
		* Can't load p1-p3 for some reason, maybe I will replace others with that
			* (Those files don't exist, hm)
	* Looks like MLD might be able to open CSX and SEL files??
		* mld -selpsr MLD\FONT2.SEL
		* mld -selpsr -f -c  MLD\*.SEL (asterisk key is :)
			* a f a key: sort
			* s key: save file...?
				* I think it just sends data to the MAG saver. Not useful for this

* .Sel:
	* 00: Width / 8
	* 01: Height

* FONT2.SEL:
	* No idea what the final F2 2A 00 is supposed to do, removing it has no effect.
	* But the prior F1 2A 00 paints a color/repeats the previous plane for the whole height of the image.
		* (2a is the height. Changing it to 15 paints only half its height as expected)

	* Some bit patterns of the shapes:

	29 cb
		29: 1 full line
		2f: 7 full lines
		30: 8 full lines
		40: 24 full lines

		ca: Changes the mode, everything is kinda scrambly
		cc: less scrambly, but still so
		theory: cb = read 3 binaries
			cc = read 4 binaries

	1 full line = 29 (3)

	read 3 binary = cb (4)
		1110 0111 = e7 (5)
		1111 1001 = f9 (6)
		1111 1110 = fe (7)

	7 full lines = 2f (8)
	read 2 binary = ca (9)
		1111 1110 = fe (a)
		1111 0001 = f1 (b)

	4 full lines = 2c (c)
	read 1 binary = c9 (d)
		1111 1101 = fd (e)

	(repeat the previous one = 79 c9 fb 79 cc???)

	4 binaries = cc (13)
		1111 0111 = f7
		1110 1111 = ef
		1001 1111 = 9f
		0111 1111 = 7f

	17 full lines = 39 (18)

	Cool, so this is enough for a reinserter. Still need to figure out colors/planes.
		What does the 00 28 02 do?

	font1.sel:
		00 28 28 28 28 28 28 28 28 28 20 00
		f1 ff f1 89 00
		f2 ff ff 89 00
	font2.sel:
		00 28 02 00
		f1 2a 00
		f2 2a 00
	* ff + 89 = 188, the height of font1. Something about f1 and f2 needs to be applied to the whole height of the file
	* f1 and f2 have specific meanings... wonder what they are
	* The first thing is just a bunch of numbers that sum to the height. (28 is the lowest byte that can't be mistaken for 29, the full-line code


	* Getting rid of the final section in p4: Just removes the cyan sections.
		* Maybe it's a section per color??
			* 2a b0 c0 c0 c9 80 01 
			* 2a b0 c0 c0 c9 80 01 
			* 2a b0 c0 c0 c9 80 01
				* 2a = two full lines (yes)
				* b0 = ?? (read some binary?)
				* 
	* Getting rid of the penultimate section in p4: Only black, orange, and different orange remain

	* First pass-through draws in the orange plane
	* Second pass-through draws in the... pink plane?
		* 12 c9 7f 29 12 c9 7f 29 03 c9 1f a3 10 00 80 a3 00
			* 12: Skip 18 lines
			* c9: read 1 binary
				* 7f: 0111 1111
				* 29: 1 full line

	* Another issue: re-used letters in the names. The "ri" in Alisa/Meryl, the two "ho" in Honghua, and the "a" in Alisa/Honghua.
		* Need to find out where the tile is being selected in the code so I can repoint it.
		* a1 = 0xa (8c)
		* a2 = 0xb  (9a)
		* ri1 = 0xc (a8)
		* ri2 = 0xd (b6)
		* sa1 = 0xe (c4)
		* sa2 = 0xf (d2)
		* me1 = 0x10 (e0)
		* me2 = 0x11 (ee)
		* ru1 = 0x12 (fc)
		* ru2 = 0x13
		* ne1 = 0x14
		* ne2 = 0x15
		* do1 = 0x16
		* do2 = 0x17
		* ra1 = 0x18
		* ra2 = 0x19
		* ho1 = 0x1a
		* ho2 = 0x1b
		* n1, n2 = ??
		* Alisa = 0a 0b 0c 0d 0e 0f
		* Meryl = 10 11 0c 0d 12 13 (16 17 12 13 18 19)
		* This isn't the right format. More research is needed

	* Big table in POSINT.COM:
		* First image is b:op1.sel, at 29a6 or 29a8
		* First pointer in that table is like 2a something
		* Most of these values are in the middle of filenames. Maybe they're not related or have a weird constant
		* Is there anything in the .SEL to define a "sprite"? What relationship does 0x28 have to the sprite height? (none)

		* Looking for values like 8c, 9a, etc
			* POS.EXE:bf6 has a table of values like bc0e, 9a0e, a90e, b80e (multiples of e, and e)
			* Lots of instances in code with 8c0e, 9a0e, etc. Try replacing them in debugger and see if I can get a tile to switch
				* It's not these

	* It's at POS.EXE:d82a.


	
	Wider-than-8 images seem to work as expected - it writes the whole block, then goes to the next one


## CGX file format
* Images is 74 (or 80) tall, 362 wide.
	* 362 = 2d+change blocks.
* Header:
	* 00: Width in blocks
	* 01-02: Height
	* 



.MSD file format:
	* Look Room 1:    f0 07 f2 01 f4 01 f5 00
	* Look Room 2:    f0 07 f2 01 f4 01 f5 00
		* f0 XX is text color
			* f0 00: black
			* f0 01: hard-to-read blue
			* f0 02: red
			* f0 03: purple
			* f0 04: green
			* f0 05: cyan
			* f0 06: yellow
			* (f0 07): white
			* f0 08: black
				* (then it repeats)
		* f2 XX is the speaker
			* f2 02: nametag is Meryl
			* f2 0f: Janitor 1
		* f4 XX is the portrait
			* f4 01: normal Alisa
			* f4 02: energetic Alisa
			* f4 03: upset Alisa
			* f4 04: surprised Alisa
			* f4 05: normal Honghua
			* f4 06: happy Honghua
			* f4 07: upset Honghua
			* f4 08: sad Honghua
			* f4 09: normal Meryl
		* f5 XX is ?
			* always f5 00?
			* sometimes f5 01, f5 02, etc

	* Text auto-breaks to the next window.

		
	* Talk Honghua 2: f0 07 f2 01 f4 01 f5 00 (Arisa speaks)
	*                 f0 05 f2 03 f4 06 f5 00 (Honghua speaks)
	* Talk Meryl:     f0 04 f2 02 f4 09 f5 00


	* When I reinsert something, the first line's color gets messed up in all the lines after the inserted one. The text itself is fine though...
		* Maybe it's skipping the first 3 bytes of the control code then?? 
	* Where does the pointer come from? How does 127 get in ESI?
		* Looks like the value is in POS.EXE, at 0xeb43.
			02 ff 02 27 01 01 ff (0xeb43)
			01 ff 02 8a 00 02 ff (0xeb48)
			03 ff 02 56 01 02 ff  
	* How to tell where each MSD file's pointers are in POS.EXE?
		* YUMI.MSD pointer to ポゼ (0x31a) is not in a clear location. There's no ff 02 prefix version of it
		* How about 0xa2 (住民はもう)? 
			* That number is way too hard to find + change.
			* The location 0x2b333 in memory has the pointer that was used to get to the current text. Useful...
				* Hey, a2 00 is at 0x2b8d1. That's POS.EXE:efd1.
					* 02 ff 02 a2 00 02 ff (same format as the others)
		* P_HON1.MSD 0x3bd:
			* 00 00 02 bd 03 05 ff
				* Well, that's a different format entirely...
		* Are they in different blocks?
			* POS1.MSD: (0xea40, 0xef20)
			* YUMI.MSD: (0xef20, ?)


## Timing Hack
* Changes from letter to letter:
	* 27360: 00 -> 04
	* a bunch of values at 0x2b311
	* some other values at 0xa0b6d, 20 20 20 20 -> 2b 5c ab 5c
	* 0x27217: decrements a lot.
	* 0x27360 gets set to "4" every character. (2440:28bb, 2ea1602f mov ax, cs:[2f60])
		* Pointing it somewhere else? That's a 0?
			* Nah, that causes it to hang forever
		* Change "test ax, ax" to "test ax, 04": Super fast text, yay!
			POS.EXE:a3b7: 85c0 -> a804
	* Later addendum: Change the 04 to 03 and it just renders near-instantly. Yay!


## Room Transition Codes
* Need a way to modify the line-counts of "arrival" text. They are at offset 00, so they would be too hard to find with the pointer-locator. (Even by assuming hundreds of normal pointers in that format, the line-count wasn't edited at all.)
* Setting breakpoints in the P_ENT -> P_CITY transition seems to load from the code 01 1a 00 ff. (37c9e)
	* Changing 01 to other values negates the room transition and does something else.
		* 02: Load more text
		* 03: Starts a battle
		* 04: Severe crash
		* 05: Another crash
		* 06: Fades to black, then hangs
		* ff: Cancels out, lets you choose next action
	* Changing 1a to other values changes the target area.
		* 00: Maintenance room
		* 01: HQ during intro
		* 02: Yumi attack
		* 03: Yumi battle (again?)
		* 04: HQ
		* 05: Corridor
		* 06: Maintenance room
		* 07: Lounge
		* 08: Shower
		* 09: Prim scene
		* 0a: Ayaka scene
		* 0b: Michass scene
		* 0c: May scene
		* 0d: Minsky scene
		* 0e: Shower/Meryl scene
		* 0f: Honghua scene
		* 10: Nedra scene
		* 11: Doctor scene
		* 12: Tina scene (21? lines)
		* 13: Junk Shop (2 lines)
		* 14: Machine/Alisa scene
		* 15: Operators scene (2 lines)
		* 16: Business Zone (2 lines)
		* 17: Old City
		* 18: Abandoned Zone
		* 19: Fairy scene (51 lines)
		* 1a: Central Hub (2 lines)
		* 1b: Abandoned building
		* 1c: Abandoned building, corridor with 8 doors (3 lines)
		* 1d: Abandoned building, door 802 (1 line)
		* 1e: Abandoned building, door 804 (1 line)
		* 1f: Abandoned building, door 803 (1 line)
		* 20: Abandoned building, door right before Michass battle
		* 21: Sewer grate
		* 22: Minsky gate entrance (GYOTEI)
		* 23: Gyotei interior (3 lines)
		* 24: Gyotei place with lots of screens (2 lines?) Place with lots of screens
		* 25: Gyotei, Prim throne (1 line)
		* 26: Sewer, just past grate
		* 27: Sewer, gondola top (2 lines)
		* 28: Sewer, on gondola
		* 29: Sewer, still on gondola (5 lines)
		* 2a: Sewer, on gondola
		* 2b: Sewer, bottom of gondola (4 lines?)
		* 2c: Sewer, bend in the road
		* 2d: Sewer, road to freaky brain lab
		* 2e: Brain lab entrance (5 lines)
		* 2f: Brain lab, room with tanks
		* 30: Brain lab core with Rasmal robot
		* 31: Operators fly you to the tower
		* 32: Tower - control room (3 lines)
		* 33: Tower - maze (2 lines)
		* 34: Tower - maze dead end (1 line)
		* 35: Tower - maze left bend,, with fork
		* 36: Tower - maze left bend into fog
		* 37: Tower - maze cross section (2 lines)
		* 38: Tower - maze L/R fork
		* 39: Tower - maze rigth bend into fog
		* 3a: Tower - maze dead end (capsule-looking wall)
		* 3b: Tower - maze L/R fork ( maybe a different one??)
		* 3c: Tower - maze exit corridor (1 line)
		* 3d: Tower - maze exit door (4 lines)
		* 3e: Tower - elevator bottom (4 lines)
		* 3f: Tower - elevator middle
		* 40: Some fuckin room in the last dungeon
		* 41: Tower - elevator top (blasted wall and door)
		* 42: Tower - room with 3 doors (4 lines)
		* 43: Tower - Fork, front/left
		* 44: Tower - Fork, front/right
		* 45: Tower - room with storage things
		* 46: Tower - "02:30" room, front/right (starts a battle)
		* 47: Tower - "02:30" room, front/right (no battle)
		* 48: Tower - capsule room
		* 49: Tower - escalator room
		* 4a: Tower - Tina/tanks room (12 lines)
		* 4b: Tower - light columns room 1
		* 4c: Tower - light columns room 2 (2 lines)
		* 4d: Tower - light columns room 3
		* 4e: Tower - final door? (10 lines)
		* 4f: Tower - Fairy room (6 lines?)
		* 50: Medical ward
		* 51: Entrance again?
		* 52: Stella Boutique (3 lines)
		* 53: Ayaka attack scene (2 lines)
		* 54: Nedra in the box (3 lines)
		* 55: Nedra possessioner in the archives (3 lines)
		* 56: Yumi scene (glitched? Alisa face is visible, and all options are available instantly)
		* 57: (freeze)
		* 60: Cool-looking palette glitches, some lines from entrance and medical ward
		* a9: crash?
	* Location ID is written to 2af8a.
		* b002 = mov al, 02 -> should I mess with this? (probably not)
		* When it reads the loc ID again, it does shl ax, 1 shl ax,1  add ax, (the id)
		* ax = (loc ID) * 5
		* ax = 82 (1a)
		* mov si, 06da; add si, ax
		* si = 75c
		* After copying some stuff, it jumps to si. There is a larget able of jump instructions here. Each is 5 bytes long.
			* eaa600e831 = jmp 31e8:00a6.
			* What are the distances between the jump landings? 136, b6, 64, 56... not consistent
			* A bunch of possible instructions are "mov cx, 0004" b90400. How many b90200's are there that I could change?


	* Oh, it's actually a word. So maintenance room is 00 00, etc
	* Anything to determine line count??
* The code that loads the line count is 2440:0897. (lodsb, mov vx, ax, etc)
	*...Doesn't run at all when the arrival text loads.

## Determining what text shows up where
* I have been marking which text appears by playing through the game and noting the circumstances. Is there any way to just look at the code surrounding the pointers and determine what flags it's checking, etc.?
	* Save file: DATA*.SLD. Probably has event flags that get read 
		* Location in memory: 2af8:000a
			* Yep, these flags get edited when you talk to or examine various things.
				* MAIN DISCOVERY: Flag to check for a flag bit is "02 ff (flagID) (flagBitIndex) 00", right before the text pointer in question. 
				* Examine Princess (1) - 0x2b007 changes from 01 to 21
					* 2440:1928 test cs:[si], al
						* cs: 2440, si: 6c07, al: 0020 (Is this literally 2440:6c07, or 2440:the location it's at?)
					* jz 1930
					* stc
					* pop si
					* Probably a push si is before this
				* Examine Vicinity: 21 -> 61 (al is 40)
				* 09 = 0000 0011
				* 21 = 0010 0001
				* 61 = 0110 0001
				* One bit per action.
					* (01) 0000 0001: Arrive in room
					* (02) 0000 0010: Talk Empress
					* (04) 0000 0100: Look Empress
					* (08) 0000 1000: Look Vicinity
					* (10) 0001 0000: Talk Party
					* (20) 0010 0000: Examine Empress
					* (40) 0100 0000: Examine Vicinity
					* (80) 1000 0000: ??
				* Think never seems to change flags. (Makes sense.) But it does check them.
			* Is there anything revealing about these in the pointers?
				* Pointer to Look Vicinity (0x17ff) is at 0x242bb. Looking for "04" somewhere
				* In memory it's at 40bba
					* lodsw 40bb2 (A while before the actual pointer) (067b), see if it's 0e64
					* dx = 67b (ax)
					* si = 2d52
					* ax = 0
					* ...
					* 27152 + "06" = offset of the flag it needs to check!
					* ff 7b 06 means "check the 6th flag (02)".
						* But not very many ff 7bs in the file. 7b probably means something specific too
						* The 7b gets added to si (6b8c)
						* 7b is the flag offset, plus 2. (7d in save file)
					* Load something from cs:si into ah (02)
						* There's a byte sequence "80 40 20 10 08 04 02 01" at 27152. That's where the 02 comes from below
						* si gets set above, it's the "06" offset in the command
					* Check if flag is equal to 02
					* lodsb at 40bbf (01)
					* lodsb at 40bc2 (00)
					* lodsb at 40bba (02) - pointer begins
					* lodsw at 40bbb, 41 19 (pointer offset)
					* lodsb at 40bbd, 40bbe (02 ff)
				* Look for ff (flag_offset) (00-07) values maybe?
					* How does it know when it's going to load text, and when it's going to check a flag?
					* There's the "test al, al" on the 0e7b that gets loaded - if 00 it will go somewhere else
				* 02 4d 20 02 ff 7b 01 00 02
				* 02 6a 1f 02 ff 7b 02 00 02 c1 1f
				* 02 f1 18 02 ff 7b 05 00 02 26 19
				* 02 34 18 02 ff 7b 06 00 02 6b 18
				* So I can probably extend the pointer-dumper to look at 4 bytes before (for flag ID) and 3 bytes before (for flag bit).
				* What is the 20/1f/18/18 byte? I was hoping it would be some sort of string ID, but 18 got repeated
					* This is one of the "byte_before" values that is one of many possible values in that ugly list I have. Not totally sure what it means or what it does
				* Looks like there's an additional check on what options are possible when clicking "Look".
					* ax and si are e35 (is 35 0e somewhere? There are similar things around)
					* lodsw 40b85 (a4 0d)
					* There are a few things like this:
						* Pointers to each of those:
							* ff ff ff 01 cc 0d d6 0d e0 0d ea 0d f4 0d 00 00 d2 0d 00 00 00 
							*                   ^Look
							* "Look": dd6 (d6 0d)
							* Going back to the menu reads 40b10 (the third ff), compares it to ff
						* 00 00 d2 0d 00 00 00 1b 0e ff
						* 00 00 dc 0d 00 00 35 0e ff
							* dc 0d, 35 0e get checked on "Look"
						* 00 00 e6 0d 00 00 9b 0e ff
							* e6 0d, 9b 0e get checekd on "Examine"
						* 00 00 f0 0d 00 00 0a 0f ff
					* ff ff ff 01 4b 0e 73 0e 06 0e 5d 0e 00 00 62 0e 65 0e 00 00 00 00 6a 0e 6f 0e02 75 19 02 ff 7b 06 00
					*                                           ^ Offset 
					* It looks at this string before showing Vicinity/Empress. Starts at third ff
					* When checking Vicinity, it reads 4b 0e, then 06 0e, 5d 0e, then 00 00, 62 0e. Last one satisfies some condition maybe? So it starts reading/executing control codes there
		* How do the flags get set? Currently I'm assuming they just set whatever flag they checked.
			* This is not the case - changing the 06 to 05, it still sets the 6th bit.
			* Oh, looks like the command to SET a flag is 02 ff 01 7b 05.


		* 0x13c characters long
		* Character stats: 100 20 210 90, 70 35 200 80, 50 20 160 70, 120 30 130 100
			* Hex version: 64 14 d2 5a, 46 23 c8 50, 32 14 a0 46, 78 1e 82 64
		* 0x100 - 126 is probably character stats.
			* 0x102: ?? - sometimes 02, sometimes 04
			* 0x103: d2 00 d2 00
			* 0x107: Alisa Special
			* 0x108: Alisa AG
			* 0x109: Alisa DEF
			* 0x10a: Alisa Current HP?
			* 0x10b: Alisa Max HP?
			* (end Alisa stuff)
			* 0x10c-10f: a0 00 a0 00 
			* ...
			* And so on for other characters.

* Stuff I know now:
	* How game progress is tracked and saved
	* How the progress is checked when determining whether to display a string
	* How flags get set
* Stuff I still don't know:
	* How is the condition acted upon? What happens if the flag is false?
		* Checks the flag
			* If true, it continues reading. 40bb5 -> 40bb9
			* If false, it reads 40bbf next (01 7b 06 00, "set flag 6"), then 40bba (02 41 19 02 ff)
				* It gets the new esi value (e64) from ebp. Wonder where that comes from
			* How does it know where to end? Each of these ends with a "ff", but I'm confused about reading 40bbf but then 40bba
	* How does it get to that line of code in the first place? When I execute "look" (or "look vicinity"), does it have a predefined starting place where it begins to run the checks?
		* Looks like there are some offset tables earlier on. Need to check these later - 00 00 ab cd 00 00 ef gh ff
	* How are multiple-conditions handled? Just more conditions in a row, with branching logic and offsets?

## Other

* There's apparently extra line drawings of this game's art in 「ぷるぷる」（あまとりあ社／１９９４年） Volume 3. Might be worth tracking down.
* https://www.suruga-ya.jp/product/detail/ZHAN212

02 ff ff 02 be 0f 03 ff
             loc  ct
0e 04 ff 02 b9 0d 06 ff
             loc  ct

05 73 0c be ce 13 ba 01 00
             loc     ct