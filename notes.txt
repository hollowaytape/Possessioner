Intro text is around POSM.EXE:b880.
You can replace with ascii text but it gets stretched out to twice its width onscreen.
	When reading a character, it branches and does stuff with cs:[08a2] and cs:[08a3].
		If x < 80, mov 1 into 08a2
		If 08a2 == 01, check if al is 0a
		If al == 20, mov 1 into 08a3
		else mov 2 into 08a3

		Are spaces still 01 width? Looks like it...
		2ec606a30802 mov cs:[08a3], 02
			-> Change it to mov 01
			This edits the cursor movement, but the characters are still doublewide. Y'know what i mean

		W is 57, gets flipped to 5700 and put in dx
		Eventually moved back to al, where it gets sub al, 20
			Then mult by 20 (6e0)
	Dialogue and exposition text in the intro seem to behave differently. Dialogue is double wide and double tall, exposition is just double wide


First save file's "look inside" text is at POS1.DSD:90.
Ascii text shows up perfectly here.

Except for the nametags, they need a text hack. (Nametags are read from the table at POS.EXE:a100)
	Table is in memory at seg 26a2
	Reads 2 bytes at a time (al, then mov ah, [si], inc si)

	Try cancelling out the mov ah, [si], inc si. (8a2446, at 2440:25be)


	Replace:
	7502 jnz 25be
	eb13 jmp 25d1

	with:
	7415 jz 25d1


	After the lodsb:

	7415 jz 25d1
	88c4 mov ah, al
	b082 mov al, 82
	90 nop

	string is:
	741588c4b08290

	It just really doesn't want to read from column 08...

	Nametag rendering:     2440:25b7
	Normal text rendering: 2440:23ef
		if it's lower than 80:
			mov ah, ff
			mov cs:[2e34], ah
			call 28cd
		Does some stuff, removes ah, then stosw.
			So, "H" gets written as 48 00. (Oh! Column 00, not 08)
		The stuff getting read to VRAM gets spaced out differently. Nametag things have extra 00-00s between the letters.
			Remove the two inc di's to stop this and get the text to be normal.

		Now the 8140's are rendered as _@ all the way out to the text.
			Just replace them with ascii spaces and it renders fine.

	Final hack:
	begins with ac3c0d

	7415 jz 25d1
	30e4 xor ah, ah
	90
	90
	90
	90
	90
	90
	90
	90

	then, after abe82b03, 90 90 again

	first string is: 741530e49090909090909090



Dump is quite large, it's about 15,173 lines after some garbage removal...

Images:
	* Intro text images.
		* PTOKYO1.CGX - "Year 2035 Tokyo"
		* PTOKYO2.CGX - some more text
	* I think all of the grey panels in battle are images. So, attack names/categories, nametags, etc
	* FIGHT.CGX is the fight layout. (All the parts that don't need translating)
	* MENU.CGX is the title screen
	* LIST.CGX is a "possessioner list", maybe a cg gallery?
	* MESF1+F2 are the corner portraits

	* Doesn't look like any are small enough to be the panels.

	* Changing the a:font.sel to laml.sel covers most of the nametags with garbage...
		* font2.sel is the rest. (the other character on that one name)
			* How do entire kana fonts fit into these tiny images??
				* They're just the letters necessary, also numbers.
	* Still unknown: the action images.
		* fp.sel is the "action panel"
		* p5.sel is a bunch of action items
		* So is p4.sel
		* Can't load p1-p3 for some reason, maybe I will replace others with that
			* (Those files don't exist, hm)
	* Looks like MLD might be able to open CSX and SEL files??
		* mld -selpsr MLD\FONT2.SEL
		* mld -selpsr -f -c  MLD\*.SEL (asterisk key is :)
			* a f d key: sort
			* s key: save file...?
				* I think it just sends data to the MAG saver. Not useful for this

* .Sel:
	* 00: Width / 8
	* 01: Height

* FONT2.SEL:
	* No idea what the final F2 2A 00 is supposed to do, removing it has no effect.
	* But the prior F1 2A 00 paints a color/repeats the previous plane for the whole height of the image.
		* (2a is the height. Changing it to 15 paints only half its height as expected)

	* Some bit patterns of the shapes:

	29 cb
		29: 1 full line
		2f: 7 full lines
		30: 8 full lines
		40: 24 full lines

		ca: Changes the mode, everything is kinda scrambly
		cc: less scrambly, but still so
		theory: cb = read 3 binaries
			cc = read 4 binaries

	1 full line = 29 (3)

	read 3 binary = cb (4)
		1110 0111 = e7 (5)
		1111 1001 = f9 (6)
		1111 1110 = fe (7)

	7 full lines = 2f (8)
	read 2 binary = ca (9)
		1111 1110 = fe (a)
		1111 0001 = f1 (b)

	4 full lines = 2c (c)
	read 1 binary = c9 (d)
		1111 1101 = fd (e)

	(repeat the previous one = 79 c9 fb 79 cc???)

	4 binaries = cc (13)
		1111 0111 = f7
		1110 1111 = ef
		1001 1111 = 9f
		0111 1111 = 7f

	17 full lines = 39 (18)

	Cool, so this is enough for a reinserter. Still need to figure out colors/planes.
		What does the 00 28 02 do?

	font1.sel:
		00 28 28 28 28 28 28 28 28 28 20 00
		f1 ff f1 89 00
		f2 ff ff 89 00
	font2.sel:
		00 28 02 00
		f1 2a 00
		f2 2a 00
	* ff + 89 = 188, the height of font1. Something about f1 and f2 needs to be applied to the whole height of the file
	* f1 and f2 have specific meanings... wonder what they are
	* The first thing is just a bunch of numbers that sum to the height. (28 is the lowest byte that can't be mistaken for 29, the full-line code


	* Getting rid of the final section in p4: Just removes the cyan sections.
		* Maybe it's a section per color??
			* 2a b0 c0 c0 c9 80 01 
			* 2a b0 c0 c0 c9 80 01 
			* 2a b0 c0 c0 c9 80 01
				* 2a = two full lines (yes)
				* b0 = ?? (read some binary?)
				* 
	* Getting rid of the penultimate section in p4: Only black, orange, and different orange remain

	* First pass-through draws in the orange plane
	* Second pass-through draws in the... pink plane?
		* 12 c9 7f 29 12 c9 7f 29 03 c9 1f a3 10 00 80 a3 00
			* 12: Skip 18 lines
			* c9: read 1 binary
				* 7f: 0111 1111
				* 29: 1 full line

	* Another issue: re-used letters in the names. The "ri" in Alisa/Meryl, the two "ho" in Honghua, and the "a" in Alisa/Honghua.
		* Need to find out where the tile is being selected in the code so I can repoint it.
		* a1 = 0xa (8c)
		* a2 = 0xb  (9a)
		* ri1 = 0xc (a8)
		* ri2 = 0xd (b6)
		* sa1 = 0xe (c4)
		* sa2 = 0xf (d2)
		* me1 = 0x10 (e0)
		* me2 = 0x11 (ee)
		* ru1 = 0x12 (fc)
		* ru2 = 0x13
		* ne1 = 0x14
		* ne2 = 0x15
		* do1 = 0x16
		* do2 = 0x17
		* ra1 = 0x18
		* ra2 = 0x19
		* ho1 = 0x1a
		* ho2 = 0x1b
		* n1, n2 = ??
		* Alisa = 0a 0b 0c 0d 0e 0f
		* Meryl = 10 11 0c 0d 12 13 (16 17 12 13 18 19)
		* This isn't the right format. More research is needed

	* Big table in POSINT.COM:
		* First image is b:op1.sel, at 29a6 or 29a8
		* First pointer in that table is like 2a something
		* Most of these values are in the middle of filenames. Maybe they're not related or have a weird constant
		* Is there anything in the .SEL to define a "sprite"? What relationship does 0x28 have to the sprite height? (none)

		* Looking for values like 8c, 9a, etc
			* POS.EXE:bf6 has a table of values like bc0e, 9a0e, a90e, b80e (multiples of e, and e)
			* Lots of instances in code with 8c0e, 9a0e, etc. Try replacing them in debugger and see if I can get a tile to switch
				* It's not these

	* It's at POS.EXE:d82a.


	
	Wider-than-8 images seem to work as expected - it writes the whole block, then goes to the next one




.MSD file format:
	* Look Room 1:    f0 07 f2 01 f4 01 f5 00
	* Look Room 2:    f0 07 f2 01 f4 01 f5 00
		* f0 XX is text color
			* f0 00: black
			* f0 01: hard-to-read blue
			* f0 02: red
			* f0 03: purple
			* f0 04: green
			* f0 05: cyan
			* f0 06: yellow
			* (f0 07): white
			* f0 08: black
				* (then it repeats)
		* f2 XX is the speaker
			* f2 02: nametag is Meryl
			* f2 0f: Janitor 1
		* f4 XX is the portrait
			* f4 01: normal Alisa
			* f4 02: energetic Alisa
			* f4 03: upset Alisa
			* f4 04: surprised Alisa
			* f4 05: normal Honghua
			* f4 06: happy Honghua
			* f4 07: upset Honghua
			* f4 08: sad Honghua
			* f4 09: normal Meryl
		* f5 XX is ?

		
	* Talk Honghua 2: f0 07 f2 01 f4 01 f5 00 (Arisa speaks)
	*                 f0 05 f2 03 f4 06 f5 00 (Honghua speaks)
	* Talk Meryl:     f0 04 f2 02 f4 09 f5 00


	* When I reinsert something, the first line's color gets messed up in all the lines after the inserted one. The text itself is fine though...
		* Maybe it's skipping the first 3 bytes of the control code then?? 
	* Where does the pointer come from? How does 127 get in ESI?
		* Looks like the value is in POS.EXE, at 0xeb43.
			02 ff 02 27 01 01 ff (0xeb43)
			01 ff 02 8a 00 02 ff (0xeb48)
			03 ff 02 56 01 02 ff  
	* How to tell where each MSD file's pointers are in POS.EXE?
		* YUMI.MSD pointer to ポゼ (0x31a) is not in a clear location. There's no ff 02 prefix version of it
		* How about 0xa2 (住民はもう)? 
			* That number is way too hard to find + change.
			* The location 0x2b333 in memory has the pointer that was used to get to the current text. Useful...
				* Hey, a2 00 is at 0x2b8d1. That's POS.EXE:efd1.
					* 02 ff 02 a2 00 02 ff (same format as the others)
		* P_HON1.MSD 0x3bd:
			* 00 00 02 bd 03 05 ff
				* Well, that's a different format entirely...
		* Are they in different blocks?
			* POS1.MSD: (0xea40, 0xef20)
			* YUMI.MSD: (0xef20, ?)